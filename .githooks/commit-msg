#!/bin/bash

# Commit message hook for Terraform learning repository
# This hook validates commit message format

commit_msg_file=$1

# Read the commit message
commit_msg=$(cat "$commit_msg_file")

# Colors for output
RED='\033[0;31m'
YELLOW='\033[1;33m'
GREEN='\033[0;32m'
NC='\033[0m'

print_error() {
    echo -e "${RED}[✗]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[⚠]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[✓]${NC} $1"
}

# Skip validation for merge commits
if [[ "$commit_msg" =~ ^Merge ]]; then
    exit 0
fi

# Check minimum length
if [ ${#commit_msg} -lt 10 ]; then
    print_error "Commit message too short (minimum 10 characters)"
    echo ""
    echo "Tips for good commit messages:"
    echo "  • Describe what the change does"
    echo "  • Use imperative mood: 'Add', 'Fix', 'Update'"
    echo "  • Be specific about what changed"
    exit 1
fi

# Check for conventional commit format (encouraged but not required)
if [[ ! "$commit_msg" =~ ^(feat|fix|docs|style|refactor|test|chore)(\(.+\))?: ]]; then
    print_warning "Consider using conventional commit format:"
    echo "  feat(s3): add bucket encryption example"
    echo "  fix(ec2): correct security group rules"
    echo "  docs(readme): update setup instructions"
    echo "  refactor(vars): improve variable descriptions"
    echo ""
fi

# Check for specific patterns that suggest good practice
good_patterns=(
    "add.*example"
    "fix.*issue"
    "update.*documentation"
    "improve.*"
    "refactor.*"
)

has_good_pattern=false
for pattern in "${good_patterns[@]}"; do
    if [[ "$commit_msg" =~ $pattern ]]; then
        has_good_pattern=true
        break
    fi
done

if [ "$has_good_pattern" = true ]; then
    print_success "Commit message follows good practices"
fi

exit 0
