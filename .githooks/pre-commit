#!/bin/bash

# Terraform Learning Repository Pre-commit Hook
# This script runs before every commit to ensure code quality and standards

set -e

echo "🔍 Running pre-commit checks for Terraform learning repository..."

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to print colored output
print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[✓]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[⚠]${NC} $1"
}

print_error() {
    echo -e "${RED}[✗]${NC} $1"
}

# Check if required tools are installed
check_dependencies() {
    print_status "Checking required dependencies..."

    local missing_tools=()

    if ! command -v terraform &> /dev/null; then
        missing_tools+=("terraform")
    fi

    if ! command -v tflint &> /dev/null; then
        print_warning "TFLint not found. Install with: brew install tflint"
    fi

    if ! command -v markdownlint &> /dev/null; then
        print_warning "markdownlint not found. Install with: npm install -g markdownlint-cli"
    fi

    if [ ${#missing_tools[@]} -ne 0 ]; then
        print_error "Missing required tools: ${missing_tools[*]}"
        echo "Please install the missing tools and try again."
        exit 1
    fi

    print_success "All required dependencies are available"
}

# Check for sensitive information
check_secrets() {
    print_status "Checking for sensitive information..."

    local secret_patterns=(
        "aws_access_key_id"
        "aws_secret_access_key"
        "password\s*="
        "secret\s*="
        "token\s*="
        "-----BEGIN.*PRIVATE KEY-----"
        "-----BEGIN.*RSA PRIVATE KEY-----"
    )

    local found_secrets=false

    for pattern in "${secret_patterns[@]}"; do
        if git diff --cached --name-only | xargs grep -l -i -E "$pattern" 2>/dev/null; then
            print_error "Potential secret found matching pattern: $pattern"
            found_secrets=true
        fi
    done

    # Check for terraform.tfvars files
    if git diff --cached --name-only | grep -q "terraform\.tfvars$"; then
        print_error "terraform.tfvars file detected. These should not be committed."
        found_secrets=true
    fi

    # Check for private key files
    if git diff --cached --name-only | grep -E "\.(key|pem)$"; then
        print_error "Private key file detected. These should not be committed."
        found_secrets=true
    fi

    if [ "$found_secrets" = true ]; then
        print_error "Sensitive information detected. Please remove before committing."
        exit 1
    fi

    print_success "No sensitive information detected"
}

# Format and validate Terraform files
check_terraform() {
    print_status "Checking Terraform files..."

    local tf_files=$(git diff --cached --name-only --diff-filter=ACM | grep '\.tf$' || true)

    if [ -z "$tf_files" ]; then
        print_status "No Terraform files to check"
        return 0
    fi

    # Check each directory containing .tf files
    local dirs=()
    for file in $tf_files; do
        dir=$(dirname "$file")
        if [[ ! " ${dirs[@]} " =~ " ${dir} " ]]; then
            dirs+=("$dir")
        fi
    done

    for dir in "${dirs[@]}"; do
        if [ -f "$dir/main.tf" ] || [ -f "$dir/provider.tf" ]; then
            print_status "Checking Terraform in directory: $dir"

            # Format check
            if ! terraform fmt -check -diff "$dir" >/dev/null 2>&1; then
                print_error "Terraform files in $dir are not properly formatted"
                echo "Run: terraform fmt $dir"
                exit 1
            fi

            # Validation check
            if [ -f "$dir/provider.tf" ] || [ -f "$dir/main.tf" ]; then
                cd "$dir"
                if ! terraform init -backend=false >/dev/null 2>&1; then
                    print_warning "Could not initialize Terraform in $dir"
                    cd - >/dev/null
                    continue
                fi

                if ! terraform validate >/dev/null 2>&1; then
                    print_error "Terraform validation failed in $dir"
                    cd - >/dev/null
                    exit 1
                fi
                cd - >/dev/null
            fi

            # TFLint check (if available)
            if command -v tflint &> /dev/null; then
                cd "$dir"
                if [ -f ".tflint.hcl" ] || tflint --init >/dev/null 2>&1; then
                    if ! tflint --quiet 2>/dev/null; then
                        print_warning "TFLint found issues in $dir (non-blocking)"
                    fi
                fi
                cd - >/dev/null
            fi
        fi
    done

    print_success "Terraform files are properly formatted and valid"
}

# Check documentation
check_documentation() {
    print_status "Checking documentation..."

    local md_files=$(git diff --cached --name-only --diff-filter=ACM | grep '\.md$' || true)

    if [ -z "$md_files" ]; then
        print_status "No documentation files to check"
        return 0
    fi

    # Check for markdownlint
    if command -v markdownlint &> /dev/null; then
        if ! echo "$md_files" | xargs markdownlint --config .markdownlint.json 2>/dev/null; then
            print_warning "Markdown linting issues found (non-blocking)"
        fi
    fi

    # Check for README files in example directories
    for file in $md_files; do
        if [[ "$file" == */README.md ]]; then
            dir=$(dirname "$file")
            if [[ "$dir" =~ ^[0-9]{2}- ]]; then
                # This is an example directory, check for required sections
                if ! grep -q "## What This Example" "$file"; then
                    print_warning "README in $dir missing 'What This Example' section"
                fi
                if ! grep -q "## How to Run\|## Setup Instructions" "$file"; then
                    print_warning "README in $dir missing setup instructions"
                fi
            fi
        fi
    done

    print_success "Documentation checks completed"
}

# Check shell scripts
check_shell_scripts() {
    print_status "Checking shell scripts..."

    local sh_files=$(git diff --cached --name-only --diff-filter=ACM | grep '\.sh$' || true)

    if [ -z "$sh_files" ]; then
        print_status "No shell scripts to check"
        return 0
    fi

    for file in $sh_files; do
        # Check for shebang
        if ! head -n1 "$file" | grep -q '^#!/'; then
            print_error "Shell script $file missing shebang"
            exit 1
        fi

        # Check for executable permission
        if [ ! -x "$file" ]; then
            print_warning "Shell script $file is not executable"
            print_status "Making $file executable..."
            chmod +x "$file"
            git add "$file"
        fi

        # Basic syntax check
        if command -v shellcheck &> /dev/null; then
            if ! shellcheck "$file" >/dev/null 2>&1; then
                print_warning "ShellCheck found issues in $file (non-blocking)"
            fi
        else
            # Basic bash syntax check
            if ! bash -n "$file" 2>/dev/null; then
                print_error "Syntax error in shell script $file"
                exit 1
            fi
        fi
    done

    print_success "Shell scripts are valid"
}

# Check for required files in example directories
check_example_structure() {
    print_status "Checking example directory structure..."

    local changed_files=$(git diff --cached --name-only --diff-filter=ACM)
    local example_dirs=()

    # Find example directories that have changes
    for file in $changed_files; do
        if [[ "$file" =~ ^[0-9]{2}-[^/]+/ ]]; then
            dir=$(echo "$file" | cut -d'/' -f1)
            if [[ ! " ${example_dirs[@]} " =~ " ${dir} " ]]; then
                example_dirs+=("$dir")
            fi
        fi
    done

    for dir in "${example_dirs[@]}"; do
        if [ -d "$dir" ]; then
            print_status "Checking structure of $dir"

            local required_files=("main.tf" "variables.tf" "outputs.tf" "provider.tf" "README.md")
            local missing_files=()

            for req_file in "${required_files[@]}"; do
                if [ ! -f "$dir/$req_file" ]; then
                    missing_files+=("$req_file")
                fi
            done

            if [ ${#missing_files[@]} -ne 0 ]; then
                print_warning "Example $dir missing files: ${missing_files[*]}"
                print_status "Consider adding these files for completeness"
            fi
        fi
    done

    print_success "Example structure checks completed"
}

# Check commit message format
check_commit_message() {
    print_status "Checking commit message format..."

    # This will be the commit message
    commit_msg_file="$1"

    if [ -z "$commit_msg_file" ]; then
        return 0
    fi

    local commit_msg=$(cat "$commit_msg_file")

    # Check for conventional commit format (optional but encouraged)
    if [[ ! "$commit_msg" =~ ^(feat|fix|docs|style|refactor|test|chore)(\(.+\))?: ]]; then
        print_warning "Consider using conventional commit format:"
        print_warning "  feat: add new example"
        print_warning "  fix: correct terraform validation"
        print_warning "  docs: update README"
    fi

    # Check for minimum length
    if [ ${#commit_msg} -lt 10 ]; then
        print_error "Commit message too short (minimum 10 characters)"
        exit 1
    fi

    print_success "Commit message format is acceptable"
}

# Main execution
main() {
    echo ""
    print_status "Starting pre-commit validation for Terraform learning repository"
    echo ""

    check_dependencies
    check_secrets
    check_terraform
    check_documentation
    check_shell_scripts
    check_example_structure

    echo ""
    print_success "🎉 All pre-commit checks passed!"
    echo ""
    print_status "Tips:"
    print_status "  • Run 'terraform fmt' to format your code"
    print_status "  • Use 'terraform validate' to check syntax"
    print_status "  • Add comprehensive README files for new examples"
    print_status "  • Follow security best practices in your configurations"
    echo ""
}

# Run main function
main "$@"
